// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventVisibility {
  PRIVATE
  PUBLIC
  INVITE_ONLY
}

enum ParticipantStatus {
  PENDING
  JOINED
  DECLINED
  LEFT
}

enum GalleryStyle {
  SCRAPBOOK
  GRID
  TIMELINE
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  avatar           String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  // Relations
  participations   EventParticipant[]
  createdEvents    Event[]            @relation("EventCreator")
  images          Image[]
  
  // Backward compatibility
  events          Event[]            @relation("EventParticipants")
}

model Event {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  location             String?
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  creatorId            String
  visibility           EventVisibility   @default(PRIVATE)
  isPublicGallery      Boolean           @default(false)
  maxAttendees         Int?             
  maxPhotosPerAttendee Int?             
  galleryStyle         GalleryStyle      @default(SCRAPBOOK)
  allowComments        Boolean           @default(false)
  coverImageUrl        String?           
  allowJoining         Boolean           @default(false)
  joinCode             String?           @unique
  joinCodeExpiresAt    DateTime?         // Optional: Set expiration for join codes
  features             String[]          @default([])
  
  // Relations
  participants         EventParticipant[]
  creator              User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  images               Image[]
  
  // Backward compatibility
  events              User[]             @relation("EventParticipants")


  @@index([creatorId])
  @@index([joinCode])
}

model EventParticipant {
  id          String           @id @default(uuid())
  eventId     String
  userId      String
  status      ParticipantStatus @default(PENDING)
  joinedAt    DateTime        @default(now())
  leftAt      DateTime?
  role        String          @default("ATTENDEE") // e.g., "ADMIN", "MODERATOR", "ATTENDEE"
  metadata    Json?           // For any additional data

  // Relations
  event       Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model Image {
  id          String   @id @default(uuid())
  url         String
  publicId    String
  description String?
  mediaType   String   @default("image")
  width       Int?
  height      Int?
  size        Int?     // File size in bytes
  format      String?  // File format (jpg, png, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign keys
  uploaderId  String
  eventId     String?
  
  // Relations
  uploader    User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)


  @@index([uploaderId])
  @@index([eventId])
}
